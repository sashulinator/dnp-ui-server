import { type Prisma, type PrismaClient } from '@prisma/client'

export async function seedAnalyticalActions(prisma: PrismaClient) {
  const actionData: Prisma.AnalyticalActionsCreateInput[] = [
    {
      id: 1,
      group: 'Конструктор метрик для столбцов',
      display: 'Кол-во строк',
      name: 'values-count',
      description: 'Это общее количество заполненных значений в столбце. Игнорирует значения NULL.',
      isText: true,
      isInt: true,
      isDate: false,
    },
    {
      id: 2,
      group: 'Конструктор метрик для столбцов',
      display: 'Процент значений',
      name: 'values-percentage',
      description: 'Процент значений в столбце по отношению к числу строк.',
      isText: true,
      isInt: true,
      isDate: false,
    },
    {
      id: 3,
      group: 'Конструктор метрик для столбцов',
      display: 'Количество незаполненных значений',
      name: 'null-count',
      description: 'Количество значений NULL в столбце(пустые).',
      isText: true,
      isInt: true,
      isDate: false,
    },
    {
      id: 4,
      group: 'Конструктор метрик для столбцов',
      display: 'Пропорция незаполненных значений',
      name: 'null-proportion',
      description: 'Показывает отношение значений NULL к общему количеству значений в столбце.',
      isText: true,
      isInt: true,
      isDate: false,
    },
    {
      id: 5,
      group: 'Конструктор метрик для столбцов',
      display: 'Количество дубликатов',
      name: 'duplicate-count',
      description:
        'Передает количество строк с повторяющимися значениями в столбце. Вычисляется как .count(col) - count(distinct(col))',
      isText: true,
      isInt: true,
      isDate: false,
    },
    {
      id: 6,
      group: 'Конструктор метрик для столбцов',
      display: 'Количество уникальных значений',
      name: 'unique-count',
      description:
        'Количество уникальных значений в столбце, которые отображаются только один раз. Например..[1, 2, 2, 3, 3, 4] => [1, 4] => count = 2',
      isText: true,
      isInt: true,
      isDate: false,
    },
    {
      id: 7,
      group: 'Конструктор метрик для столбцов',
      display: 'Пропорция уникальных значений',
      name: 'unique-proportion',
      description: 'Соотношение количества уникальных значений и общего числа записей',
      isText: true,
      isInt: true,
      isDate: false,
    },
    {
      id: 8,
      group: 'Конструктор метрик для столбцов',
      display: 'Количество отличительных значений',
      name: 'distinct-count',
      description:
        'Количество исключительных элементов в столбце. Например..[1, 2, 2, 3, 3, 4] => [1, 2, 3, 4] => count = 4',
      isText: true,
      isInt: true,
      isDate: false,
    },
    {
      id: 9,
      group: 'Конструктор метрик для столбцов',
      display: 'Пропорция отличительных значений',
      name: 'distinct-proportion',
      description: 'Соотношение количества исключительных значений по отношению к общему числу записей.',
      isText: true,
      isInt: true,
      isDate: false,
    },
    {
      id: 10,
      group: 'Конструктор метрик для столбцов',
      display: 'Мин',
      name: 'min',
      description: 'Только для числовых значений. Возвращает минимальное значение.',
      isText: false,
      isInt: true,
      isDate: false,
    },
    {
      id: 11,
      group: 'Конструктор метрик для столбцов',
      display: 'Макс',
      name: 'max',
      description: 'Только для числовых значений. Возвращает максимальное значение.',
      isText: false,
      isInt: true,
      isDate: false,
    },
    {
      id: 12,
      group: 'Конструктор метрик для столбцов',
      display: 'Минимальная длина',
      name: 'min-length',
      description: 'Только для текстовых значений. Возвращает минимальную длину значений в столбце.',
      isText: true,
      isInt: false,
      isDate: false,
    },
    {
      id: 13,
      group: 'Конструктор метрик для столбцов',
      display: 'Максимальная длина',
      name: 'max-length',
      description: 'Только для текстовых значений. Возвращает максимальную длину значений в столбце.',
      isText: true,
      isInt: false,
      isDate: false,
    },
    {
      id: 14,
      group: 'Конструктор метрик для столбцов',
      display: 'Значения',
      name: 'mean',
      description: 'Текстовые значения: возвращает среднюю длину значений.',
      isText: true,
      isInt: true,
      isDate: false,
    },
    {
      id: 15,
      group: 'Конструктор метрик для столбцов',
      display: 'Медиана',
      name: 'median',
      description: 'Только для числовых значений.',
      isText: false,
      isInt: true,
      isDate: false,
    },
    {
      id: 16,
      group: 'Конструктор метрик для столбцов',
      display: 'Сумма',
      name: 'sum',
      description: 'Только для числовых значений. Возвращает сумму всех значений в столбце.',
      isText: false,
      isInt: true,
      isDate: false,
    },
    {
      id: 17,
      group: 'Конструктор метрик для столбцов',
      display: 'Стандартное отклонение',
      name: 'standard-deviation',
      description: 'Только для числовых значений. Возвращает стандартное отклонение.',
      isText: false,
      isInt: true,
      isDate: false,
    },
    {
      id: 18,
      group: 'Конструктор метрик для столбцов',
      display: 'Первый квартиль',
      name: 'first-quantile',
      description: 'Только для числовых значений. Среднее число между наименьшим значением и медианой',
      isText: false,
      isInt: true,
      isDate: false,
    },
    {
      id: 19,
      group: 'Конструктор метрик для столбцов',
      display: 'Третий квартиль',
      name: 'third-quantile',
      description: 'Только для числовых значений. Среднее число между медианой и наибольшим значением',
      isText: false,
      isInt: true,
      isDate: false,
    },
    {
      id: 20,
      group: 'Конструктор метрик для столбцов',
      display: 'Межквартильный диапазон',
      name: 'inter-quantile-range',
      description: 'Только для числовых значений. Разница между третьим и первым квартилем',
      isText: false,
      isInt: true,
      isDate: false,
    },
  ]
  for (const action of actionData) {
    await prisma.analyticalActions.create({
      data: action,
    })
  }
}
