// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Process {
  id                    String              @db.VarChar(24)
  normalizationConfigId String              @db.VarChar(24)
  // meta
  createdBy             String              @db.VarChar(24)
  createdAt             DateTime            @default(now())
  // relations
  normalizationConfig   NormalizationConfig @relation(fields: [normalizationConfigId], references: [id])

  @@id([id])
}

model StoreConfig {
  kn        String        @db.VarChar(36)
  extendsKn String?       @db.VarChar(36)
  type      String        @db.VarChar(10)
  data      Json
  // meta
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  createdBy String        @db.VarChar(24)
  updatedBy String        @db.VarChar(24)
  // relation
  extends   StoreConfig?  @relation("ExtendsStoreConfig", fields: [extendsKn], references: [kn])
  extended  StoreConfig[] @relation("ExtendsStoreConfig")

  @@id([kn])
}

model NormalizationConfig {
  id        String    @db.VarChar(24)
  name      String
  v         Int
  last      Boolean   @default(true)
  data      Json
  // meta
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String    @db.VarChar(24)
  updatedBy String    @db.VarChar(24)
  // relations
  processes Process[]

  @@id([id])
}

// **************
// *** SYSTEM ***
// **************

model Translation {
  id     Int    @default(autoincrement())
  key    String
  ns     String
  locale String
  data   String

  @@id([id])
}
