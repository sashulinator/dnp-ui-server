// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @db.VarChar(24)
  name     String @db.VarChar(24)
  password String @db.VarChar(24)
  avatar   String

  processCreators Process[] @relation("processCreators")

  storeConfigCreators StoreConfig[] @relation("storeConfigCreators")
  storeConfigUpdaters StoreConfig[] @relation("storeConfigUpdaters")

  targetTableCreators TargetTable[] @relation("targetTableCreators")
  targetTableUpdaters TargetTable[] @relation("targetTableUpdaters")

  operationalTableCreators OperationalTable[] @relation("operationalTableCreators")
  operationalTableUpdaters OperationalTable[] @relation("operationalTableUpdaters")

  dictionaryTableCreators DictionaryTable[] @relation("dictionaryTableCreators")
  dictionaryTableUpdaters DictionaryTable[] @relation("dictionaryTableUpdaters")

  normalizationConfigCreators NormalizationConfig[] @relation("normalizationConfigCreators")
  normalizationConfigUpdaters NormalizationConfig[] @relation("normalizationConfigUpdaters")

  @@id([id])
}

model Process {
  id                         String         @db.VarChar(24)
  type                       String         @db.VarChar(24)
  // id сущности которая вызвала процесс
  initiatorId                String?        @db.VarChar(24)
  data                       Json?
  runtimeConfigData          Json?
  tableId                    String         @db.VarChar(24)
  normalizationConfigVersion Int?
  eventTrackingId            Int            @unique
  // relations
  events                     ProcessEvent[]
  // meta
  createdAt                  DateTime       @default(now())
  createdById                String?        @db.VarChar(24)
  createdBy                  User?          @relation("processCreators", fields: [createdById], references: [id])

  @@id([id])
}

model ProcessEvent {
  id             String   @db.VarChar(24)
  event          String   @db.VarChar(24)
  calculation    Process  @relation(fields: [calculation_id], references: [eventTrackingId])
  calculation_id Int
  procedure_id   String   @db.VarChar(24)
  step           Int
  timestamp      DateTime

  @@id([id])
}

model StoreConfig {
  kn          String    @db.VarChar(24)
  type        StoreType
  data        Json
  // meta
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String    @db.VarChar(24)
  updatedById String    @db.VarChar(24)
  createdBy   User      @relation("storeConfigCreators", fields: [createdById], references: [id])
  updatedBy   User      @relation("storeConfigUpdaters", fields: [updatedById], references: [id])

  @@id([kn])
}

model OperationalTable {
  kn          String        @db.VarChar(24)
  display     String        @db.VarChar(24)
  tableName   String        @db.VarChar(24)
  description String
  defaultView TableViewType
  columns     Json
  nav         Boolean
  // meta
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdById String        @db.VarChar(24)
  updatedById String        @db.VarChar(24)
  createdBy   User          @relation("operationalTableCreators", fields: [createdById], references: [id])
  updatedBy   User          @relation("operationalTableUpdaters", fields: [updatedById], references: [id])

  @@id([kn])
}

model DictionaryTable {
  kn          String        @db.VarChar(24)
  display     String        @db.VarChar(24)
  tableName   String        @db.VarChar(24)
  description String
  defaultView TableViewType
  columns     Json
  nav         Boolean
  // meta
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdById String        @db.VarChar(24)
  updatedById String        @db.VarChar(24)
  createdBy   User          @relation("dictionaryTableCreators", fields: [createdById], references: [id])
  updatedBy   User          @relation("dictionaryTableUpdaters", fields: [updatedById], references: [id])

  @@id([kn])
}

model TargetTable {
  kn          String        @db.VarChar(24)
  display     String        @db.VarChar(24)
  tableName   String        @db.VarChar(24)
  description String
  defaultView TableViewType
  columns     Json
  nav         Boolean
  // meta
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdById String        @db.VarChar(24)
  updatedById String        @db.VarChar(24)
  createdBy   User          @relation("targetTableCreators", fields: [createdById], references: [id])
  updatedBy   User          @relation("targetTableUpdaters", fields: [updatedById], references: [id])

  @@id([kn])
}

model NormalizationConfig {
  id          String   @db.VarChar(24)
  name        String
  v           Int
  last        Boolean  @default(true)
  data        Json
  // meta
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String   @db.VarChar(24)
  updatedById String   @db.VarChar(24)
  createdBy   User     @relation("normalizationConfigCreators", fields: [createdById], references: [id])
  updatedBy   User     @relation("normalizationConfigUpdaters", fields: [updatedById], references: [id])

  @@id([id])
}

model Heap {
  name        String @unique
  description String
  data        Json
}

// **************
// *** SYSTEM ***
// **************

model Translation {
  id     Int    @default(autoincrement())
  key    String
  ns     String
  locale String
  data   String

  @@id([id])
}

enum StoreType {
  postgres
  s3
}

enum TableViewType {
  tree
  table
}
