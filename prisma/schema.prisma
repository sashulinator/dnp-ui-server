// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @db.VarChar(24)
  name     String @db.VarChar(24)
  password String @db.VarChar(24)

  targetTableCreators  TargetTable[] @relation("targetTableCreators")
  tableSchemasCreators TableSchema[] @relation("tableSchemasCreators")
  targetTableUpdaters  TargetTable[] @relation("targetTableUpdaters")
  tableSchemasUpdaters TableSchema[] @relation("tableSchemasUpdaters")

  @@id([id])
}

model Process {
  id                    String              @db.VarChar(24)
  normalizationConfigId String              @db.VarChar(24)
  // relations
  normalizationConfig   NormalizationConfig @relation(fields: [normalizationConfigId], references: [id])
  // meta
  createdBy             String              @db.VarChar(24)
  createdAt             DateTime            @default(now())

  @@id([id])
}

model StoreConfig {
  kn        String    @db.VarChar(36)
  type      StoreType
  data      Json
  // meta
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String    @db.VarChar(24)
  updatedBy String    @db.VarChar(24)

  @@id([kn])
}

model TableSchema {
  kn           String        @db.VarChar(36)
  name         String        @db.VarChar(36)
  data         Json
  // relations
  targetTables TargetTable[]
  // meta
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  createdById  String        @db.VarChar(24)
  updatedById  String        @db.VarChar(24)
  createdBy    User          @relation("tableSchemasCreators", fields: [createdById], references: [id])
  updatedBy    User          @relation("tableSchemasUpdaters", fields: [updatedById], references: [id])

  @@id([kn])
}

model TargetTable {
  kn            String      @db.VarChar(24)
  name          String      @db.VarChar(24)
  tableSchemaKn String      @db.VarChar(24)
  nav           Boolean
  data          Json
  // relations
  tableSchema   TableSchema @relation(fields: [tableSchemaKn], references: [kn])
  // meta
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  createdById   String      @db.VarChar(24)
  updatedById   String      @db.VarChar(24)
  createdBy     User        @relation("targetTableCreators", fields: [createdById], references: [id])
  updatedBy     User        @relation("targetTableUpdaters", fields: [updatedById], references: [id])

  @@id([kn])
}

model NormalizationConfig {
  id        String    @db.VarChar(24)
  name      String
  v         Int
  last      Boolean   @default(true)
  data      Json
  // relations
  processes Process[]
  // meta
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String    @db.VarChar(24)
  updatedBy String    @db.VarChar(24)

  @@id([id])
}

// **************
// *** SYSTEM ***
// **************

model Translation {
  id     Int    @default(autoincrement())
  key    String
  ns     String
  locale String
  data   String

  @@id([id])
}

enum StoreType {
  jdbc
  s3
}
